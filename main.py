#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import threading
from datetime import datetime
from telegram_commenter import TelegramCommenter
import time

class TelegramCommenterGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("ü§ñ Telegram Auto Commenter")
        self.root.geometry("900x700")
        self.root.resizable(True, True)
        
        self.commenter = TelegramCommenter()
        self.monitoring_thread = None
        self.monitoring_active = False
        
        self.create_widgets()
    
    def create_widgets(self):
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)
        
        accounts_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="üë• –û–±–ª—ñ–∫–æ–≤—ñ –∑–∞–ø–∏—Å–∏", menu=accounts_menu)
        accounts_menu.add_command(label="–î–æ–¥–∞—Ç–∏ –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å", command=self.add_account_dialog)
        accounts_menu.add_command(label="–í–∏–¥–∞–ª–∏—Ç–∏ –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å", command=self.remove_account_dialog)
        accounts_menu.add_command(label="–°—Ç–∞—Ç—É—Å –æ–±–ª—ñ–∫–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤", command=self.show_accounts_status)
        accounts_menu.add_command(label="–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è", command=self.check_connections)
        
        channels_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="üì∫ –ö–∞–Ω–∞–ª–∏", menu=channels_menu)
        channels_menu.add_command(label="–î–æ–¥–∞—Ç–∏ –∫–∞–Ω–∞–ª", command=self.add_channel_dialog)
        channels_menu.add_command(label="–í–∏–¥–∞–ª–∏—Ç–∏ –∫–∞–Ω–∞–ª", command=self.remove_channel_dialog)
        channels_menu.add_command(label="–ü—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ –æ–±–ª—ñ–∫–æ–≤—ñ –∑–∞–ø–∏—Å–∏ –¥–æ –∫–∞–Ω–∞–ª—É", command=self.assign_accounts_to_channel)
        channels_menu.add_command(label="–°—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª—ñ–≤", command=self.show_channels_status)
        
        settings_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", menu=settings_menu)
        settings_menu.add_command(label="–ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", command=self.show_settings)
        settings_menu.add_command(label="–ó–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", command=self.change_settings_dialog)
        
        stats_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", menu=stats_menu)
        stats_menu.add_command(label="–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", command=self.show_statistics)
        
        bot_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="üöÄ –ë–æ—Ç", menu=bot_menu)
        bot_menu.add_command(label="–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞", command=self.start_bot)
        bot_menu.add_command(label="–ó—É–ø–∏–Ω–∏—Ç–∏ –±–æ—Ç–∞", command=self.stop_bot)
        
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        self.log_text = scrolledtext.ScrolledText(main_frame, height=25, width=100)
        self.log_text.grid(row=0, column=0, columnspan=2, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        button_frame = ttk.Frame(main_frame)
        button_frame.grid(row=1, column=0, columnspan=2, pady=10)
        
        ttk.Button(button_frame, text="–û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å", command=self.refresh_status).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="–û—á–∏—Å—Ç–∏—Ç–∏ –ª–æ–≥", command=self.clear_logs).pack(side=tk.LEFT, padx=5)
        
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(0, weight=1)
        main_frame.rowconfigure(0, weight=1)
        
        self.log_message("–ü—Ä–æ–≥—Ä–∞–º–∞ –∑–∞–ø—É—â–µ–Ω–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å.")
    
    def log_message(self, message):
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.log_text.insert(tk.END, f"[{timestamp}] {message}\n")
        self.log_text.see(tk.END)
        self.root.update_idletasks()
    
    def clear_logs(self):
        self.log_text.delete(1.0, tk.END)
    
    def show_message(self, title, message, type="info"):
        if type == "info":
            messagebox.showinfo(title, message)
        elif type == "warning":
            messagebox.showwarning(title, message)
        elif type == "error":
            messagebox.showerror(title, message)
    
    def input_dialog(self, title, prompt, show_char=None):
        import tkinter.simpledialog as simpledialog
        
        try:
            def log_and_show():
                self.log_message(f"–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–≤–æ–¥—É: {prompt}")
                self.log_message("‚ö†Ô∏è –í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ —É –≤—ñ–∫–Ω—ñ, —â–æ –∑'—è–≤–∏—Ç—å—Å—è!")
                
                value = simpledialog.askstring(
                    title, 
                    f"{prompt}\n\n–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ —ñ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å OK\n(–ù–ï –∑–∞–∫—Ä–∏–≤–∞–π—Ç–µ –≤—ñ–∫–Ω–æ!)", 
                    parent=self.root, 
                    show=show_char
                )
                return value
            
            if threading.current_thread() != threading.main_thread():
                result_container = []
                event = threading.Event()
                
                def execute_in_main():
                    try:
                        result = log_and_show()
                        result_container.append(result)
                    except Exception as e:
                        self.log_message(f"–ü–æ–º–∏–ª–∫–∞ –¥—ñ–∞–ª–æ–≥—É: {e}")
                        result_container.append(None)
                    finally:
                        event.set()
                
                self.root.after_idle(execute_in_main)
                
                if event.wait(timeout=300):
                    result = result_container[0] if result_container else None
                    if result is None:
                        self.root.after(0, lambda: self.log_message("‚ùå –ö–æ–¥ –Ω–µ –≤–≤–µ–¥–µ–Ω–æ –∞–±–æ –¥—ñ–∞–ª–æ–≥ —Å–∫–∞—Å–æ–≤–∞–Ω–æ"))
                    return result
                else:
                    self.root.after(0, lambda: self.log_message("‚è∞ –¢–∞–π–º–∞—É—Ç –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ–¥—É"))
                    return None
            else:
                return log_and_show()
                
        except Exception as e:
            self.log_message(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –¥—ñ–∞–ª–æ–≥—É: {e}")
            return None
    
    def paste_from_clipboard(self, entry):
        try:
            pasted = self.root.clipboard_get()
            entry.delete(0, tk.END)
            entry.insert(0, pasted)
        except tk.TclError:
            self.show_message("–ü–æ–º–∏–ª–∫–∞", "–ë—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
    
    def add_account_dialog(self):
        dialog = tk.Toplevel(self.root)
        dialog.title("–î–æ–¥–∞—Ç–∏ –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å")
        dialog.geometry("600x600")
        dialog.transient(self.root)
        dialog.grab_set()
        
        ttk.Label(dialog, text="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (+380...):").pack(pady=5)
        phone_frame = ttk.Frame(dialog)
        phone_frame.pack(pady=5)
        phone_var = tk.StringVar()
        phone_entry = ttk.Combobox(phone_frame, textvariable=phone_var, values=[acc["phone"] for acc in self.commenter.config["accounts"]])
        phone_entry.pack(side=tk.LEFT)
        ttk.Button(phone_frame, text="–í—Å—Ç–∞–≤–∏—Ç–∏ –∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º—ñ–Ω—É", command=lambda: self.paste_from_clipboard(phone_entry)).pack(side=tk.LEFT, padx=5)
        
        ttk.Label(dialog, text="API ID:").pack(pady=5)
        api_id_frame = ttk.Frame(dialog)
        api_id_frame.pack(pady=5)
        api_id_entry = ttk.Entry(api_id_frame, width=35)
        api_id_entry.pack(side=tk.LEFT)
        ttk.Button(api_id_frame, text="–í—Å—Ç–∞–≤–∏—Ç–∏ –∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º—ñ–Ω—É", command=lambda: self.paste_from_clipboard(api_id_entry)).pack(side=tk.LEFT, padx=5)
        
        ttk.Label(dialog, text="API Hash:").pack(pady=5)
        api_hash_frame = ttk.Frame(dialog)
        api_hash_frame.pack(pady=5)
        api_hash_entry = ttk.Entry(api_hash_frame, width=35)
        api_hash_entry.pack(side=tk.LEFT)
        ttk.Button(api_hash_frame, text="–í—Å—Ç–∞–≤–∏—Ç–∏ –∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º—ñ–Ω—É", command=lambda: self.paste_from_clipboard(api_hash_entry)).pack(side=tk.LEFT, padx=5)
        
        ttk.Label(dialog, text="–Ü–º'—è (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ):").pack(pady=5)
        name_entry = ttk.Entry(dialog, width=40)
        name_entry.pack(pady=5)
        
        def submit():
            phone = phone_var.get().strip()
            api_id = api_id_entry.get().strip()
            api_hash = api_hash_entry.get().strip()
            name = name_entry.get().strip()
            
            if self.commenter.add_account(phone, api_id, api_hash, name):
                self.show_message("–£—Å–ø—ñ—Ö", "‚úÖ –û–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å –¥–æ–¥–∞–Ω–æ")
                self.log_message(f"–û–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å {phone} –¥–æ–¥–∞–Ω–æ")
            else:
                self.show_message("–ü–æ–º–∏–ª–∫–∞", "‚åê –û–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å —É–∂–µ —ñ—Å–Ω—É—î", "warning")
            dialog.destroy()
        
        ttk.Button(dialog, text="–î–æ–¥–∞—Ç–∏", command=submit).pack(pady=20)
    
    def remove_account_dialog(self):
        if not self.commenter.config["accounts"]:
            self.show_message("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "‚ùå –ñ–æ–¥–Ω–æ–≥–æ –æ–±–ª—ñ–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É –Ω–µ –¥–æ–¥–∞–Ω–æ", "warning")
            return
            
        dialog = tk.Toplevel(self.root)
        dialog.title("–í–∏–¥–∞–ª–∏—Ç–∏ –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å")
        dialog.geometry("600x400")
        dialog.transient(self.root)
        dialog.grab_set()
        
        ttk.Label(dialog, text="–í–∏–±–µ—Ä—ñ—Ç—å –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:").pack(pady=5)
        
        accounts_frame = ttk.Frame(dialog)
        accounts_frame.pack(pady=5, fill=tk.BOTH, expand=True)
        
        selected_account = tk.StringVar()
        
        for account in self.commenter.config["accounts"]:
            ttk.Radiobutton(
                accounts_frame, 
                text=f"{account['name']} ({account['phone']})", 
                variable=selected_account,
                value=account['phone']
            ).pack(anchor=tk.W, pady=2)
        
        def submit():
            phone = selected_account.get()
            if not phone:
                self.show_message("–ü–æ–º–∏–ª–∫–∞", "‚ùå –í–∏–±–µ—Ä—ñ—Ç—å –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è", "warning")
                return
                
            if self.commenter.remove_account(phone):
                self.show_message("–£—Å–ø—ñ—Ö", "‚úÖ –û–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å –≤–∏–¥–∞–ª–µ–Ω–æ")
                self.log_message(f"–û–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å {phone} –≤–∏–¥–∞–ª–µ–Ω–æ")
            else:
                self.show_message("–ü–æ–º–∏–ª–∫–∞", "‚ùå –û–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", "warning")
            dialog.destroy()
        
        ttk.Button(dialog, text="–í–∏–¥–∞–ª–∏—Ç–∏", command=submit).pack(pady=20)
    
    def add_channel_dialog(self):
        dialog = tk.Toplevel(self.root)
        dialog.title("–î–æ–¥–∞—Ç–∏ –∫–∞–Ω–∞–ª")
        dialog.geometry("600x600")
        dialog.transient(self.root)
        dialog.grab_set()
        
        ttk.Label(dialog, text="–Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∫–∞–Ω–∞–ª—É (–±–µ–∑ @):").pack(pady=5)
        channel_frame = ttk.Frame(dialog)
        channel_frame.pack(pady=5)
        channel_entry = ttk.Entry(channel_frame, width=35)
        channel_entry.pack(side=tk.LEFT)
        ttk.Button(channel_frame, text="–í—Å—Ç–∞–≤–∏—Ç–∏ –∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º—ñ–Ω—É", command=lambda: self.paste_from_clipboard(channel_entry)).pack(side=tk.LEFT, padx=5)
        
        ttk.Label(dialog, text="–í–∏–±–µ—Ä—ñ—Ç—å –æ–±–ª—ñ–∫–æ–≤—ñ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ü—å–æ–≥–æ –∫–∞–Ω–∞–ª—É:").pack(pady=(10,5))
        accounts_frame = ttk.Frame(dialog)
        accounts_frame.pack(pady=5, fill=tk.BOTH, expand=True)
        
        selected_accounts = []
        for account in self.commenter.config["accounts"]:
            var = tk.BooleanVar()
            chk = ttk.Checkbutton(accounts_frame, text=f"{account['name']} ({account['phone']})", variable=var)
            chk.pack(anchor=tk.W)
            selected_accounts.append((account['phone'], var))
        
        def submit():
            channel = channel_entry.get().strip().replace("@", "").replace("https://t.me/", "")
            if not channel:
                self.show_message("–ü–æ–º–∏–ª–∫–∞", "‚åê –í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∫–∞–Ω–∞–ª—É", "warning")
                return
            
            assigned_accounts = [phone for phone, var in selected_accounts if var.get()]
            
            if self.commenter.add_channel(channel, assigned_accounts):
                self.show_message("–£—Å–ø—ñ—Ö", f"‚úÖ –ö–∞–Ω–∞–ª @{channel} –¥–æ–¥–∞–Ω–æ –∑ {len(assigned_accounts)} –æ–±–ª—ñ–∫–æ–≤–∏–º–∏ –∑–∞–ø–∏—Å–∞–º–∏\n‚ö†Ô∏è –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –≤ –∫–∞–Ω–∞–ª—ñ —É–≤—ñ–º–∫–Ω–µ–Ω–æ!")
                self.log_message(f"–ö–∞–Ω–∞–ª @{channel} –¥–æ–¥–∞–Ω–æ –∑ –æ–±–ª—ñ–∫–æ–≤–∏–º–∏ –∑–∞–ø–∏—Å–∞–º–∏: {assigned_accounts}")
            else:
                self.show_message("–ü–æ–º–∏–ª–∫–∞", "‚åê –ö–∞–Ω–∞–ª —É–∂–µ —ñ—Å–Ω—É—î", "warning")
            dialog.destroy()
        
        ttk.Button(dialog, text="–î–æ–¥–∞—Ç–∏", command=submit).pack(pady=20)
    
    def assign_accounts_to_channel(self):
        if not self.commenter.config["channels"]:
            self.show_message("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "‚åê –ñ–æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É –Ω–µ –¥–æ–¥–∞–Ω–æ", "warning")
            return
        
        dialog = tk.Toplevel(self.root)
        dialog.title("–ü—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ –æ–±–ª—ñ–∫–æ–≤—ñ –∑–∞–ø–∏—Å–∏ –¥–æ –∫–∞–Ω–∞–ª—É")
        dialog.geometry("600x600")
        dialog.transient(self.root)
        dialog.grab_set()
        
        ttk.Label(dialog, text="–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–∞–ª:").pack(pady=5)
        channel_var = tk.StringVar()
        channel_combo = ttk.Combobox(dialog, textvariable=channel_var, values=[ch['username'] for ch in self.commenter.config["channels"]])
        channel_combo.pack(pady=5)
        
        ttk.Label(dialog, text="–í–∏–±–µ—Ä—ñ—Ç—å –æ–±–ª—ñ–∫–æ–≤—ñ –∑–∞–ø–∏—Å–∏:").pack(pady=(10,5))
        accounts_frame = ttk.Frame(dialog)
        accounts_frame.pack(pady=5, fill=tk.BOTH, expand=True)
        
        selected_accounts = []
        
        def update_accounts(*args):
            for widget in accounts_frame.winfo_children():
                widget.destroy()
            selected_accounts.clear()
            
            channel_username = channel_var.get()
            if not channel_username:
                return
            
            channel_config = next((ch for ch in self.commenter.config["channels"] if ch["username"] == channel_username), None)
            if not channel_config:
                return
            
            assigned_set = set(channel_config.get("accounts", []))
            
            for account in self.commenter.config["accounts"]:  
                var = tk.BooleanVar(value=account["phone"] in assigned_set)
                chk = ttk.Checkbutton(accounts_frame, text=f"{account['name']} ({account['phone']})", variable=var)
                chk.pack(anchor=tk.W)
                selected_accounts.append((account['phone'], var))
        
        channel_var.trace('w', update_accounts)
        
        def submit():
            channel_username = channel_var.get()
            if not channel_username:
                self.show_message("–ü–æ–º–∏–ª–∫–∞", "‚åê –í–∏–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–∞–ª", "warning")
                return
            
            assigned_accounts = [phone for phone, var in selected_accounts if var.get()]
            
            if self.commenter.assign_accounts_to_channel(channel_username, assigned_accounts):
                self.show_message("–£—Å–ø—ñ—Ö", f"‚úÖ –û–±–ª—ñ–∫–æ–≤—ñ –∑–∞–ø–∏—Å–∏ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –¥–æ @{channel_username}")
                self.log_message(f"–û–±–ª—ñ–∫–æ–≤—ñ –∑–∞–ø–∏—Å–∏ {assigned_accounts} –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –¥–æ @{channel_username}")
            else:
                self.show_message("–ü–æ–º–∏–ª–∫–∞", "‚åê –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è", "warning")
            dialog.destroy()
        
        ttk.Button(dialog, text="–ó–±–µ—Ä–µ–≥—Ç–∏", command=submit).pack(pady=20)
        update_accounts()
    
    def remove_channel_dialog(self):
        dialog = tk.Toplevel(self.root)
        dialog.title("–í–∏–¥–∞–ª–∏—Ç–∏ –∫–∞–Ω–∞–ª")
        dialog.geometry("600x600")
        dialog.transient(self.root)
        dialog.grab_set()
        
        ttk.Label(dialog, text="–Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∫–∞–Ω–∞–ª—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:").pack(pady=5)
        channel_entry = ttk.Entry(dialog, width=40)
        channel_entry.pack(pady=5)
        
        def submit():
            channel = channel_entry.get().strip()
            if self.commenter.remove_channel(channel):
                self.show_message("–£—Å–ø—ñ—Ö", "‚úÖ –ö–∞–Ω–∞–ª –≤–∏–¥–∞–ª–µ–Ω–æ")
                self.log_message(f"–ö–∞–Ω–∞–ª @{channel} –≤–∏–¥–∞–ª–µ–Ω–æ")
            else:
                self.show_message("–ü–æ–º–∏–ª–∫–∞", "‚åê –ö–∞–Ω–∞–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", "warning")
            dialog.destroy()
        
        ttk.Button(dialog, text="–í–∏–¥–∞–ª–∏—Ç–∏", command=submit).pack(pady=20)
    
    def change_settings_dialog(self):
        dialog = tk.Toplevel(self.root)
        dialog.title("–ó–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
        dialog.geometry("700x500")
        dialog.transient(self.root)
        dialog.grab_set()
        
        settings = self.commenter.config["comment_settings"]
        
        notebook = ttk.Notebook(dialog)
        notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        time_frame = ttk.Frame(notebook)
        notebook.add(time_frame, text="‚è∞ –ß–∞—Å")
        
        ttk.Label(time_frame, text=f"–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ (—Ö–≤): {settings['min_delay']}").pack(pady=5)
        min_delay_entry = ttk.Entry(time_frame, width=10)
        min_delay_entry.insert(0, settings['min_delay'])
        min_delay_entry.pack(pady=5)
        
        ttk.Label(time_frame, text=f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ (—Ö–≤): {settings['max_delay']}").pack(pady=5)
        max_delay_entry = ttk.Entry(time_frame, width=10)
        max_delay_entry.insert(0, settings['max_delay'])
        max_delay_entry.pack(pady=5)
        
        activity_frame = ttk.Frame(notebook)
        notebook.add(activity_frame, text="üéØ –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å")
        
        ttk.Label(activity_frame, text=f"–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä—è (0-1): {settings['comment_probability']}").pack(pady=5)
        comment_prob_entry = ttk.Entry(activity_frame, width=10)
        comment_prob_entry.insert(0, settings['comment_probability'])
        comment_prob_entry.pack(pady=5)
        
        ttk.Label(activity_frame, text=f"–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –ª–∞–π–∫–∞ (0-1): {settings['like_probability']}").pack(pady=5)
        like_prob_entry = ttk.Entry(activity_frame, width=10)
        like_prob_entry.insert(0, settings['like_probability'])
        like_prob_entry.pack(pady=5)
        
        ttk.Label(activity_frame, text=f"–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –ª–∞–π–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (0-1): {settings.get('reply_like_probability', 0.3)}").pack(pady=5)
        reply_like_prob_entry = ttk.Entry(activity_frame, width=10)
        reply_like_prob_entry.insert(0, settings.get('reply_like_probability', 0.3))
        reply_like_prob_entry.pack(pady=5)
        
        ttk.Label(activity_frame, text=f"–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å —Ç–∏—Ö–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ (0-1): {settings.get('silent_activity_probability', 0.2)}").pack(pady=5)
        silent_prob_entry = ttk.Entry(activity_frame, width=10)
        silent_prob_entry.insert(0, settings.get('silent_activity_probability', 0.2))
        silent_prob_entry.pack(pady=5)
        
        ttk.Label(activity_frame, text=f"–ú—ñ–Ω—ñ–º—É–º –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –Ω–∞ –ø–æ—Å—Ç: {settings.get('min_comments_per_post', 3)}").pack(pady=5)
        min_comments_entry = ttk.Entry(activity_frame, width=10)
        min_comments_entry.insert(0, settings.get('min_comments_per_post', 3))
        min_comments_entry.pack(pady=5)
        
        ttk.Label(activity_frame, text=f"–ú–∞–∫—Å–∏–º—É–º –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –Ω–∞ –ø–æ—Å—Ç: {settings.get('max_comments_per_post', 8)}").pack(pady=5)
        max_comments_entry = ttk.Entry(activity_frame, width=10)
        max_comments_entry.insert(0, settings.get('max_comments_per_post', 8))
        max_comments_entry.pack(pady=5)
        
        def submit():
            try:
                min_delay = int(min_delay_entry.get() or settings['min_delay'])
                max_delay = int(max_delay_entry.get() or settings['max_delay'])
                if min_delay > max_delay:
                    raise ValueError("–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –Ω–µ –º–æ–∂–µ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É")
                
                comment_prob = float(comment_prob_entry.get() or settings['comment_probability'])
                like_prob = float(like_prob_entry.get() or settings['like_probability'])
                reply_like_prob = float(reply_like_prob_entry.get() or settings.get('reply_like_probability', 0.3))
                silent_prob = float(silent_prob_entry.get() or settings.get('silent_activity_probability', 0.2))
                min_comments = int(min_comments_entry.get() or settings.get('min_comments_per_post', 3))
                max_comments = int(max_comments_entry.get() or settings.get('max_comments_per_post', 8))
                
                if min_comments > max_comments:
                    raise ValueError("–ú—ñ–Ω—ñ–º—É–º –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –Ω–µ –º–æ–∂–µ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ –º–∞–∫—Å–∏–º—É–º")
                
                settings['min_delay'] = min_delay
                settings['max_delay'] = max_delay
                settings['comment_probability'] = comment_prob
                settings['like_probability'] = like_prob
                settings['reply_like_probability'] = reply_like_prob
                settings['silent_activity_probability'] = silent_prob
                settings['min_comments_per_post'] = min_comments
                settings['max_comments_per_post'] = max_comments
                
                self.commenter.save_config()
                self.show_message("–£—Å–ø—ñ—Ö", "‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ")
                self.log_message("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ")
            except ValueError as e:
                self.show_message("–ü–æ–º–∏–ª–∫–∞", f"‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç: {e}", "warning")
            dialog.destroy()
        
        ttk.Button(dialog, text="–ó–±–µ—Ä–µ–≥—Ç–∏", command=submit).pack(pady=20)
    
    def show_settings(self):
        settings = self.commenter.config
        msg = f"""üìã –ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:
–û–±–ª—ñ–∫–æ–≤—ñ –∑–∞–ø–∏—Å–∏: {len(settings['accounts'])}
–ö–∞–Ω–∞–ª–∏: {len(settings['channels'])}
–ó–∞—Ç—Ä–∏–º–∫–∞ (–≤–∏–ø–∞–¥–∫–æ–≤–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω): {settings['comment_settings']['min_delay']}-{settings['comment_settings']['max_delay']} —Ö–≤
–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä—è: {settings['comment_settings']['comment_probability']*100}% 
–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –ª–∞–π–∫–∞: {settings['comment_settings']['like_probability']*100}% 
–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –ª–∞–π–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {settings['comment_settings'].get('reply_like_probability', 0.3)*100}% 
–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å —Ç–∏—Ö–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: {settings['comment_settings'].get('silent_activity_probability', 0.2)*100}% 
AI –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è: {'‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ' if settings['ai_settings']['enabled'] else '‚åê –í–∏–º–∫–Ω–µ–Ω–æ'}"""
        self.show_message("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", msg)
    
    def show_statistics(self):
        stats = self.commenter.show_statistics_text()
        self.show_message("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", stats)
    
    def show_accounts_status(self):
        status = self.commenter.show_accounts_status_text()
        self.show_message("üë• –°—Ç–∞—Ç—É—Å –æ–±–ª—ñ–∫–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤", status)
    
    def show_channels_status(self):
        status = self.commenter.show_channels_status_text()
        self.show_message("üì∫ –°—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª—ñ–≤", status)
    
    def check_connections(self):
        if not self.commenter.config['accounts']:
            self.show_message("–ü–æ–º–∏–ª–∫–∞", "‚ùå –ñ–æ–¥–Ω–æ–≥–æ –æ–±–ª—ñ–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É –Ω–µ –¥–æ–¥–∞–Ω–æ", "warning")
            return
        
        def run_check():
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                results = loop.run_until_complete(self.commenter.check_connections_gui(self.log_message))
                self.root.after(0, lambda: self.show_message("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏", results))
            except Exception as e:
                self.log_message(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {e}")
            finally:
                loop.close()
        
        thread = threading.Thread(target=run_check, daemon=True)
        thread.start()
        self.log_message("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω—å...")
    
    def refresh_status(self):
        self.log_message("–°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ")
    
    def start_bot(self):
        if not self.commenter.config['accounts']:
            self.show_message("–ü–æ–º–∏–ª–∫–∞", "‚ùå –ñ–æ–¥–Ω–æ–≥–æ –æ–±–ª—ñ–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É –Ω–µ –¥–æ–¥–∞–Ω–æ", "warning")
            return
        if not self.commenter.config['channels']:
            self.show_message("–ü–æ–º–∏–ª–∫–∞", "‚ùå –ñ–æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É –Ω–µ –¥–æ–¥–∞–Ω–æ", "warning")
            return
        
        if self.monitoring_active:
            self.show_message("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ", "warning")
            return
        
        auth_warning = """üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...

‚ö†Ô∏è –í–ê–ñ–õ–ò–í–û:
- –Ø–∫—â–æ –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ, –∑'—è–≤–ª—è—Ç—å—Å—è –¥—ñ–∞–ª–æ–≥–∏ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ–¥—É
- –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ —É–≤—ñ–º–∫–Ω–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª–∞—Ö

–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏?"""
        
        if not messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–ø—É—Å–∫—É", auth_warning):
            return
        
        self.monitoring_active = True
        self.commenter.monitoring_active = True
        self.monitoring_thread = threading.Thread(target=self.run_monitoring, daemon=True)
        self.monitoring_thread.start()
        self.log_message("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –∑ –≤–∏–ø–∞–¥–∫–æ–≤–∏–º–∏ –∑–∞—Ç—Ä–∏–º–∫–∞–º–∏ —Ç–∞ –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—è–º–∏")
    
    def stop_bot(self):
        if not self.monitoring_active:
            self.show_message("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ", "warning")
            return
        
        self.monitoring_active = False
        self.commenter.monitoring_active = False
        
        if self.monitoring_thread and self.monitoring_thread.is_alive():
            self.log_message("üõë –ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞...")
            self.monitoring_thread.join(timeout=5)
        
        self.show_message("–£—Å–ø—ñ—Ö", "üõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")
    
    def run_monitoring(self):
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        async def monitor():
            try:
                await self.commenter.initialize_clients_gui(self.input_dialog, self.log_message)
                await self.commenter.start_monitoring_gui(self.log_message)
            except Exception as e:
                self.log_message(f"–ü–æ–º–∏–ª–∫–∞: {e}")
            finally:
                self.monitoring_active = False
                self.commenter.monitoring_active = False
        
        loop.run_until_complete(monitor())
        loop.close()

def main():
    root = tk.Tk()
    app = TelegramCommenterGUI(root)
    root.mainloop()

if __name__ == "__main__":
    main()